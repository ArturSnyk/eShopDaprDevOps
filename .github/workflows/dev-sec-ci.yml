name: DevSecOps CI

on:
  workflow_call:
    inputs:
      imageName:
        required: true
        type: string
      projectPath:
        required: true 
        type: string
      projectName:
        required: true
        type: string
    secrets:
      AZURE_CONTAINER_REGISTRY:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      SNYK_TOKEN:
        required: true
      AZ_APPINSIGHTS_CONNECTION_STRING:
        required: true
      AZ_SUBSCRIPTION_TOKEN:
        required: true

env:
  DOTNET_VERSION: 6.0.x

jobs:
  Build-and-scan-image:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout Github Action'
      uses: actions/checkout@v2

    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build
      run: |
        dotnet restore ${{ inputs.projectPath }}/${{ inputs.projectName }}
        cd ${{ inputs.projectPath }}
        dotnet build --no-restore

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      continue-on-error: true # To make sure that SARIF upload gets called
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk.sarif --file=${{ inputs.projectPath }}/obj/project.assets.json

    # - name: Upload result to GitHub Code Scanning
    #   uses: github/codeql-action/upload-sarif@v1
    #   with:
    #     sarif_file: snyk.sarif

    - name: Build Image
      run: |
        docker build -f ${{ inputs.projectPath }}/Dockerfile -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ inputs.imageName }}:${{ github.sha }} .

      # - name: Run Snyk to push the result to Github Security for medium threshold      
    - uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\
      continue-on-error: true
      with:
        image: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ inputs.imageName }}:${{ github.sha }}
        args: --file=${{ inputs.projectPath }}/Dockerfile --severity-threshold=medium      

    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: snyk.sarif        

    - uses: Azure/container-scan@v0 
      name: Scan image for vulnerabilities
      id: container-scan
      continue-on-error: true # In real life scenario you have this to false
      with:
        image-name: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ inputs.imageName }}:${{ github.sha }}
        run-quality-checks: true

    - name: Push Image
      run: |
        sudo az acr login -n ${{ secrets.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
        sudo docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/${{ inputs.imageName }}:${{ github.sha }} 

    # Push it to app insights (scan results from Azure Container Scan)
    - name: Post logs to appinsights
      uses: Azure/publish-security-assessments@v0
      with: 
        scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
        connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
        subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }}         
