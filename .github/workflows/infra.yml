name: Create Azure Resources

on:
  # push:
  #   branches:
  #   - main

  #   paths:
  #   - bicep/**    
  #   - .github/workflows/infra.yml
  workflow_dispatch:
        
jobs:
  create-azure-resources:
    
    env:
      LOCATION: 'eastus'
      RESOURCE_GROUP_NAME: 'rg-aks-devsecops'

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}    

      - name: Create Resource Group
        run: |
          az group create -n ${{ env.RESOURCE_GROUP_NAME }} -l ${{ env.LOCATION }} 

      # If any error is present the GH action will stop there
      # this avoid to try to deploy the template for nothing
      - name: Convert to ARM template
        run: |
          bicep build ./bicep/main.bicep  

      # Replace parameter in parameter file
      - name: Replace token parameters file
        uses: cschleiden/replace-tokens@v1.0
        with:        
          tokenPrefix: __        
          tokenSuffix: __        
          files: '["bicep/main.parameters.json"]'
        env:
          location: ${{ env.LOCATION  }}
          adminUsername: ${{ secrets.ADMIN_USERNAME }}
          adminPassword: ${{ secrets.ADMIN_PASSWORD }}              
          aadAdminGroupId: ${{ secrets.AAD_ADMIN_GROUP_ID }}
          adminSqlUsername: ${{ secrets.ADMIN_SQL_USERNAME }}
          adminSqlPassword: ${{ secrets.ADMIN_SQL_PASSWORD }}

      - name: Replace token jumpbox init file
        uses: cschleiden/replace-tokens@v1.0
        with:        
          tokenPrefix: __        
          tokenSuffix: __        
          files: '["bicep/modules/compute/jumpbox-cloud-init.yaml"]'
        env:
          GITHUB_REPOSITORY: $env.GITHUB_REPOSITORY
          GITHUB_PAT: 'mockguid'

      - uses: actions/upload-artifact@v2
        with:
          name: cloudinit
          path: bicep/modules/compute/jumpbox-cloud-init.yaml         
      
      # See the change to be deployed, a good practice
      # will be to leverage environment and approvers
      - name: what-if
        run: |
          az deployment group what-if --resource-group ${{ env.RESOURCE_GROUP_NAME }} --template-file ./bicep/main.json --parameters ./bicep/main.parameters.json

      # This steps is needed only if running the deployment multiple times
      # if the VM exists already the cloudinit failed the deployment
      - name: Delete Jumpbox if exists
        run: |
          $vmCheck = az vm list --query "[?name=='jumpbox']" | ConvertFrom-Json
          $vmExists = $vmCheck.Length -gt 0
          if ($vmExists) {            
            az vm delete -g ${{ env.RESOURCE_GROUP_NAME }} -n jumpbox --yes
                        
            $disks = az resource list -g ${{ env.RESOURCE_GROUP_NAME }} --resource-type 'Microsoft.Compute/disks' | ConvertFrom-Json

            foreach ($disk in $disks) {
              az resource delete --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name $disk.name --resource-type $disk.type
            }

          }
        shell: pwsh

      - name: Deploy Azure Resources
        id: armDeployment
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.SUBSCRIPTION_ID }}
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./bicep/main.json
          parameters: ./bicep/main.parameters.json     

      # - name: Add jumpbox A record
      #   run: |
      #     $dns= az network private-dns zone list -g ${{ steps.armDeployment.outputs.aksRgName }} | ConvertFrom-Json
      #     az network private-dns record-set a add-record -g ${{ steps.armDeployment.outputs.aksRgName }} -z $dns[0].name -n jumpbox -a ${{ steps.armDeployment.outputs.jumpboxPrivateIP }}
      #   shell: pwsh

      # - name: Enabled Flux Addon
      #   run: |
      #     az feature register --namespace Microsoft.ContainerService --name AKS-ExtensionManager
      #     az provider register --namespace Microsoft.Kubernetes
      #     az provider register --namespace Microsoft.ContainerService
      #     az provider register --namespace Microsoft.KubernetesConfiguration
      #     az extension add -n k8s-configuration
      #     az extension add -n k8s-extension  
      #     az extension update -n k8s-configuration
      #     az extension update -n k8s-extension
      #     az k8s-configuration flux create -g ${{ env.RESOURCE_GROUP_NAME }} -c ${{ steps.armDeployment.outputs.aksRgName }} -n flux-gitops --namespace flux -t connectedClusters --scope cluster -u https://github.com/fluxcd/flux2-kustomize-helm-example --branch main  --kustomization name=infra path=./infrastructure prune=true --kustomization name=apps path=./apps/staging prune=true dependsOn=["infra"]            
      #   shell: pwsh        

      # - uses: gliech/create-github-secret-action@v1
      #   name: Write ACR registry name in secrets
      #   with:
      #     name: AZURE_CONTAINER_REGISTRY
      #     value: ${{ steps.armDeployment.outputs.arcName }}
      #     pa_token: ${{ secrets.PA_TOKEN }}          
      
      - name: logout
        run: |
          az logout                              
